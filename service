#!/bin/bash
#
# cf-push
#
# This is a Cisco Cloud Center external service example to deploy an Cloud Foundry Application
# Cloud Foundry is a PaaS system, so what we are doing is front ending the Login and Push
# Process with a Cloud Center button that will ask for all the needed information to deploy
# an application into the Cloud Foundry PaaS platform.  
# 
# This service leverages the default Cloud Foundry CLI commands as well as the default ENV vars that CF uses
# for login, password, Organization, Space, API endpoint.  I have defined them below. 
# 
#
# Cloud Foundry env vars to be used or mapped into Cloud Center
#
#		$CF_API - API endpoint of cloud foundry instance  
#		$CF_USER - User name in cloud foundry
#		$CF_PASS - Password
#		$CF_ORG - Org
#		$CF_SPACE - Space
#		$CF_APP_URL - URL to HTTP location to grab application
#		$CF_APP_NAME - App name in CF that we are creating 
#		$APP_DIR - Name of the directory the applications is in
# 		$APP_BUILD_TYPE - type of application to compile, mavin, gradle, python, static
#		(today we only have gradle in this example, enhancement to expand it to the UI)
#
# Locally we will use a few also
# 
#		cmd for our case statement is the first parameter passed in is either start or stop
# 		to run: service <start> or <stop> 
#
#

exec > >(tee -a /var/tmp/swarm-init_$$.log) 2>&1

source /usr/local/osmosix/etc/.osmosix.sh
source /usr/local/osmosix/etc/userenv
source /usr/local/osmosix/service/utils/cfgutil.sh
source /usr/local/osmosix/service/utils/agent_util.sh

cd ~

# Move over cliqr repo and move back at end.
sudo mv /etc/yum.repos.d/cliqr.repo ~

agentSendLogMessage "EXTERNAL SERVICE - Cloud Foundry Service to push an application has started"
agentSendLogMessage "We need to update the OS and add some packages to run the service"
agentSendLogMessage "Executing a YUM UPDATE and installing epl-release" 

sudo yum update -y

# sudo yum install -y epel-release

. /utils.sh


env

print_log "$(env)"

agentSendLogMessage $(env)

cmd=$1
serviceStatus=""

if [ -n "$gitTag" ]; then
    agentSendLogMessage  "Found gitTag parameter gitTag = ${gitTag}"
else
     agentSendLogMessage  "Didn't find custom parameter gitTag. Using gitTag=master"
     gitTag="Cloud Foundry push service for Cisco Cloud Center"
fi




agentSendLogMessage "INSTALL - Installing wget for application bits download"
sudo yum install -y wget

agentSendLogMessage "INSTALL - Installing Java8 for gradle compiles"
sudo yum install -y java-1.8.0-openjdk-headless
sudo yum install -y java-1.8.0-openjdk-devel

# Fetch the bits for the CLI using WGET
agentSendLogMessage "Downloading the CLI tools needed for cloud foundry"
sudo wget -O /etc/yum.repos.d/cloudfoundry-cli.repo https://packages.cloudfoundry.org/fedora/cloudfoundry-cli.repo

agentSendLogMessage "INSTALL - Installing Cloud Foundry CLI client ..."
sudo yum install -y cf-cli

agentSendLogMessage "Install git" 
sudo yum install -y git
agentSendLogMessage "All done with needed packages for the service, now to login, compile and push app"
# Run the Cloud Foundry Push Service
case $cmd in
        start)
    	  agentSendLogMessage "Executing START in the Script to login, GIT, Compile and CF Push App" 
          agentSendLogMessage "cf login [-a API_URL] [-u USERNAME] [-p PASSWORD] [-o ORG] [-s SPACE]" 
          agentSendLogMessage "Logging into Cloud Foundry using the following ...."
          agentSendLogMessage "cf login -a $CF_API -u $CF_USER -p $CF_PASS -o $CF_ORG -s $CF_SPACE"
          cf login -a $CF_API -u $CF_USER -p $CF_PASS -o $CF_ORG -s $CF_SPACE > cflogin.log
          CF_LOGIN_LOG=$(cat cflogin.log)
          agentSentLogMessage "$CF_LOGIN_LOG"
          agentSendLogMessage "Cloud Foundry Application name to deploy is  $CF_APP_NAME"     
          agentSendLogMessage "START - GIT CLONE downloading ... the Application from $CF_APP_URL and saving locally"
          git clone $CF_APP_URL
          APP_DIR=$(echo $CF_APP_URL | sed 's/.*\///')
          agentSendLogMessage "changing directory to $APP_DIR"
          cd $APP_DIR
          agentSendLogMessage "Compiling the application with gradle, this could take a long time ...."
          # Compile Application, in future this should be a switch for mavin, gradle, python ...
          ./gradlew clean assemble
          # This is the Meat of the service, call cf cli and cf push the application to CF
          cf push $CF_APP_NAME > cfrun.log
          CF_LOG=$(cat cfrun.log)
          agentSendLogMessage "$CF_LOG"
          agentSendLogMessage "Cloud Foundry Application now deployed"
          serviceStatus="Our internal Service has now been Started"
        ;;
        stop)   
          agentSendLogMessage "REMOVE - delete a stack called $CF_APP_NAME"
          cf delete $CF_APP_NAME
          serviceStatus="Stopped"
        ;;
        *)
          serviceStatus="Error: Not a valid argument"
        exit 127
        ;;
esac
sudo mv ~/cliqr.repo /etc/yum.repos.d/
